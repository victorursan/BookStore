@startuml

package Models {
    class Book
    class Client
    class BaseEntity<ID>
}

package Repository {
    interface IRepository<E>
    class BookRepository
    class ClientRepository
}

package Controller {
    class Controller
}

package Validators {
    class IValidator<E>
    class BookValidator
    class ClientValidator
}

class BaseEntity<ID> {
    - Integer id
    + Integer getId()
    + void setId()
}


class Book implements BaseEntity {
    - String title
    - String author
    - Long ISBN
    - String genre
    - String publisher
    - Integer price
    - Boolean available
    + Long getISBN()
    + void setISBN(Long ISBN)
    + String getGenre()
    + void setGenre(String genre)
    + String getPublisher()
    + void setPublisher(String publisher)
    + Integer getPrice()
    + void setPrice(Integer price)
    + String getAuthor()
    + void setAuthor(String author)
    + String getTitle()
    + void setTitle(String title)
    + Boolean isAvailable()
    + void setAvailable(Boolean available)
}


class Client implements BaseEntity{
    - String firstName
    - String lastName
    - List<Book> books
    + String getFirstName()
    + void setFirstName(String firstName)
    + String getLastName()
    + void setLastName(String lastName)
    + List<Book> getBooks()
    + void setBooks(List<Book> books)
}

interface IRepository<E> {
    + void add(E elem)
    + Optional<E> get(int id)
    + Iterable<E> getAll()
    + Optional<E> update(int id, E elem)
    + Optional<E> delete(int id);
}

class BookRepository implements IRepository {
    - List<Book> books
}

class ClientRepository implements IRepository {
    - List<Client> clients
}

interface IValidator<E> {
    + void validate(E entity)
}

class BookValidator implements IValidator
class ClientValidator implements IValidator

class Controller {
    - Stream<T> getStreamFromIterable(Iterable<T> iterable)
    - int getValidIDForIterable(Iterable<T> iterable)
    + void addBook(String title, String author, Long ISBN, String genre, String publisher, Integer price)
    + void addClient(String firstName, String lastName)
    + void updateBook(int initId, String title, String author, Long ISBN, String genre, String publisher)
    + void deleteBook(int initId) throws IndexOutOfBoundsException
    + Iterable<Client> getAllClients()
    + Iterable<Book> getAllBooks()
    + List<Book> filterBooksByGenre(String s)
}

Models +-- Validators
Client "0,1" *-- "many" Book : has

@enduml